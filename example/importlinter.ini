[importlinter]
root_packages =
    domains
include_external_packages = True

# Production DDD Configuration
# This configuration enforces Domain-Driven Design boundaries while allowing
# reasonable shared utilities and cross-domain communication patterns.

[importlinter:contract:document_domain]
name = Document domain boundaries
type = forbidden
source_modules =
    domains.document
forbidden_modules =
    domains.billing.*

[importlinter:contract:billing_domain]
name = Billing domain boundaries
type = forbidden
source_modules =
    domains.billing
forbidden_modules =
    domains.document.*

[importlinter:contract:domain_independence]
name = Domain independence
type = independence
modules =
    domains.document
    domains.billing

# Test configuration with recursive wildcard (**)
[importlinter:contract:test_recursive_wildcard]
name = Test recursive wildcard patterns
type = independence
modules =
    domains.document
    domains.org_and_user
ignore_imports =
    domains.document.** -> domains.org_and_user.**
unmatched_ignore_imports_alerting = warn

# Test configuration with single wildcard (*) 
[importlinter:contract:test_single_wildcard]
name = Test single wildcard patterns
type = independence
modules =
    domains.document
    domains.org_and_user
ignore_imports =
    domains.document.* -> domains.org_and_user.*
unmatched_ignore_imports_alerting = warn

# Test configuration showing the difference between * and ** wildcards
[importlinter:contract:test_wildcard_difference]
name = Test wildcard difference demonstration
type = forbidden
source_modules =
    domains.document
forbidden_modules =
    domains.org_and_user
ignore_imports =
    domains.document.** -> domains.org_and_user.**
    domains.document.apps.doclib.tests.integration.test_workflow -> domains.billing.billing_operations_violations
unmatched_ignore_imports_alerting = warn

# Test configuration showing single wildcard behavior
[importlinter:contract:test_single_wildcard_only]
name = Test single wildcard only (should fail for nested imports)
type = forbidden
source_modules =
    domains.document.apps.doclib.tests
forbidden_modules =
    domains.contacts
ignore_imports =
    domains.document.apps.doclib.tests.* -> domains.contacts.*
unmatched_ignore_imports_alerting = warn

# Test configuration showing recursive wildcard behavior
[importlinter:contract:test_recursive_wildcard_only]
name = Test recursive wildcard only (should pass for nested imports)
type = forbidden
source_modules =
    domains.document.apps.doclib.tests
forbidden_modules =
    domains.contacts
ignore_imports =
    domains.document.apps.doclib.tests.** -> domains.contacts.**
unmatched_ignore_imports_alerting = warn

# Test your original pattern: "document.apps.doclib.tests.* -> contacts"
[importlinter:contract:test_original_pattern]
name = Test original pattern with actual folders
type = forbidden
source_modules =
    domains.document.apps.doclib.tests
forbidden_modules =
    domains.contacts
ignore_imports =
    domains.document.apps.doclib.tests.unit.* -> domains.contacts.**
    domains.document.apps.doclib.tests.integration.* -> domains.contacts.**
unmatched_ignore_imports_alerting = warn

# Test with ** wildcard for deeper nesting
[importlinter:contract:test_original_pattern_recursive]
name = Test original pattern with ** wildcard
type = forbidden
source_modules =
    domains.document.apps.doclib.tests
forbidden_modules =
    domains.contacts
ignore_imports =
    domains.document.apps.doclib.tests.** -> domains.contacts.**
unmatched_ignore_imports_alerting = warn
